-- Monads are a natural extension of applicative functors and with them
-- we're concerned with this: if you have a value with a context, m a,
-- how do you apply to it a function that takes a normal a and returns a
-- value with a context? That is, how do you apply a function of
-- type a -> m b to a value of type m a? So essentially,
-- we will want this function:
-- (>>=) :: (Monad m) => m a -> (a -> m b) -> m b
--
-- The >>= function is pronounced as 'bind'.

-- If we have a fancy value and a function that takes a normal value
-- but returns a fancy value, how do we feed that fancy value into the function?
